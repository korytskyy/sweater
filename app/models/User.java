package models;

import com.avaje.ebean.Ebean;
import com.avaje.ebean.Model;
import com.fasterxml.jackson.annotation.JsonIgnore;
import services.PasswordHasher;
import services.SecurityService;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import java.util.Optional;

@Entity
public class User implements SessionId {

    @Id
    @GeneratedValue
    public Long id;

    @Column(unique = true)
    private String username;

    @JsonIgnore
    private String passwordHash;

    //@Inject is not working for some reason, as workaround it'll be instantiated manually
    private static PasswordHasher passwordHasher = new SecurityService();

    public static class Dao {

        private static Model.Finder<Long, User> find = new Model.Finder<>(User.class);

        public static Optional<User> find(String username) {
            return Optional.ofNullable(find.where().eq("username", username).findUnique());
        }

        public static User save(User user) {
            Ebean.save(user);
            return user;
        }
    }

//    public User() {
//    }

    private User(String username, String passwordHash) {
        this.username = username;
        this.passwordHash = passwordHash;
    }

    public static User create(String username, String plainPassword) {
        return new User(username, passwordHasher.generatePasswordHash(plainPassword));
    }

    @Override
    public String toString() {
        return username;
    }

    @Override
    public String sessionValue() {
        return username;
    }

    // autogenerated boilerplate

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
    }

    public String getPasswordHash() {
        return passwordHash;
    }
}