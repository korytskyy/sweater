package models;

import com.avaje.ebean.Ebean;
import com.avaje.ebean.Model;

import javax.inject.Singleton;
import javax.persistence.*;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Entity
public class Sweat {

    public static final int MAX_LENGTH = 140;

    @Id
    @GeneratedValue
    private Long id;

    private String content;

    @Column(updatable = false)
    private OffsetDateTime creationTime;

    @ManyToOne
    private User owner;

    @Singleton
    public static class Dao {
        private static Model.Finder<Long, Sweat> find = new Model.Finder<>(Sweat.class);

        public static List<Sweat> findAll() {
            return find.orderBy("creationTime desc").findList();
        }

        public static Sweat save(Sweat sweat) {
            Ebean.save(sweat);
            return sweat;
        }
    }

    private Sweat(User owner, String content, OffsetDateTime creationTime) {
        this.content = content;
        this.owner = owner;
        this.creationTime = creationTime;
    }

    @Override
    public String toString() {
        return String.format("%tF '%s' created by %s", creationTime, content, owner);
    }

    /**
     * Purpose of this class is gathering Sweat properties for further validation before instantiation
     */
    public static class Builder {
        private String content;
        private User owner;

        /**
         *
         * @param owner User
         * @param content of potential Sweat
         */
        public Builder(User owner, String content) {
            this.owner = owner;
            this.content = content;
        }

        /**
         * Expose invalid state of object properties.
         * @return list of validation error keys for further mapping to user friendly descriptions
         */
        public List<String> validate() {
            ArrayList<String> validationErrorList = new ArrayList<>();
            if (content == null || content.isEmpty()) {
                validationErrorList.add("sweats.error.missing");
            }
            if (Objects.toString(content, "").length() > MAX_LENGTH) {
                validationErrorList.add("sweats.error.sizelimit");
            }
            return validationErrorList;
        }

        /**
         * Create Sweat object if state is valid
         * @return new Sweat object
         * @throws IllegalStateException in case of invalid state
         * @see Builder#validate()
         */
        public Sweat build() {
            if (!validate().isEmpty()) {
                throw new IllegalStateException("State of object properties is invlaid");
            }
            return new Sweat(owner, content, OffsetDateTime.now());
        }
    }

    // autogenerated boilerplate

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public OffsetDateTime getCreationTime() {
        return creationTime;
    }

    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Sweat sweat = (Sweat) o;

        if (id != null ? !id.equals(sweat.id) : sweat.id != null) return false;
        if (content != null ? !content.equals(sweat.content) : sweat.content != null) return false;
        if (creationTime != null ? !creationTime.equals(sweat.creationTime) : sweat.creationTime != null) return false;
        return !(owner != null ? !owner.equals(sweat.owner) : sweat.owner != null);

    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (content != null ? content.hashCode() : 0);
        result = 31 * result + (creationTime != null ? creationTime.hashCode() : 0);
        result = 31 * result + (owner != null ? owner.hashCode() : 0);
        return result;
    }

}
